@rendermode InteractiveServer
@inject EventsClient EventsClient
@inject IJSRuntime JSRuntime
@attribute [StreamRendering]

@if (ScheduleEventViewModel is null || Id is null || DarkModeCssClass is null)
{
    <i class="loading"></i>
}
else
{
    <div class="modal @DarkModeCssClass" id="@GetModalId(Id)" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLongTitle">@title</h5>
                    <button type="button" @onclick="@((args) => {CloseModal(); SetModelNull(); })" class="btn-close @DarkModeCssClass" />
                </div>

                <div class="modal-body">
                    <EditForm Model="ScheduleEventViewModel"
                              FormName="ManageEvent"
                              OnValidSubmit="HandleSubmit"
                              Enhance>
                        <DataAnnotationsValidator />

                        <div class="form-group">
                            <label for="room">Room:</label>
                            <InputText id="room" @bind-Value="ScheduleEventViewModel.Room" class="form-control" placeholder="Enter room number" />
                            <ValidationMessage For="() => ScheduleEventViewModel.Room" />
                        </div>

                        <div class="form-group">
                            <label for="name">Name:</label>
                            <InputText id="name" @bind-Value="ScheduleEventViewModel.Name" class="form-control" placeholder="Enter event name" />
                            <ValidationMessage For="() => ScheduleEventViewModel.Name" />
                        </div>

                        <div class="form-group type-group">
                            <label id="classType-label" for="classType">Type:</label>
                            <InputRadioGroup @bind-Value="ScheduleEventViewModel.Type" id="classType">
                                @foreach (var type in Enum.GetValues<ScheduleEvent.ClassType>())
                                {
                                    string id = $"{Id.ToString()}-{@type.ToString().ToLower()}";
                                    <div class="classTypeElement">
                                        <InputRadio Value="type" id="@id" />
                                        <label for="@id">@type</label>
                                    </div>
                                }
                            </InputRadioGroup>
                        </div>

                        <div class="form-group">
                            <label for="lecturer">Lecturer:</label>
                            <InputText id="lecturer" @bind-Value="ScheduleEventViewModel.Lecturer" class="form-control" placeholder="Enter lecturer name" />
                            <ValidationMessage For="() => ScheduleEventViewModel.Lecturer" />
                        </div>

                        <div class="form-group">
                            <label for="additionalInformation">Additional Information:</label>
                            <InputTextArea id="additionalInformation" @bind-Value="ScheduleEventViewModel.AdditionalInformation" class="form-control" placeholder="Enter additional information" />
                            <ValidationMessage For="() => ScheduleEventViewModel.AdditionalInformation" />
                        </div>

                        <div class="form-group">
                            <label class="btn btn-outline-primary" for="addtionalEvents" title="Option comming soon!"> <span class="clr-secondary">⤹</span> More Events at This Time? <span class="clr-secondary">⤸</span></label>
                            <InputCheckbox disabled id="addtionalEvents" class="btn-check form-control" @bind-Value="ScheduleEventViewModel.AddtionalEvents" />
                        </div>

                        <div class="submit-group">
                            <button type="submit" class="btn btn-primary">Save</button>
                            <button type="button" @onclick="@((args) => {CloseModal(); SetModelNull(); })" class="btn btn-secondary">Close</button>
                        </div>
                    </EditForm>
                    <span>
                    @* <EditForm EditContext="editContext" FormName="ManageEvent" OnValidSubmit="HandleSubmit">
                        <DataAnnotationsValidator />

                        <div class="form-group">
                            <label for="room">Room:</label>
                            <InputText id="room" Value="@ScheduleEventViewModel.Room" ValueExpression="() => ScheduleEventViewModel.Room"  ValueChanged="(v) => ScheduleEventViewModel.Room = v" class="form-control" placeholder="Enter room number" />
                            <ValidationMessage For="() => ScheduleEventViewModel.Room" />
                        </div>

                        <div class="form-group">
                            <label for="name">Name:</label>
                            <InputText id="name" Value="@ScheduleEventViewModel.Name" ValueExpression="() => ScheduleEventViewModel.Name" ValueChanged="(v) => ScheduleEventViewModel.Name = v" class="form-control" placeholder="Enter event name" />
                            <ValidationMessage For="() => ScheduleEventViewModel.Name" />
                        </div>

                        <div class="form-group type-group">
                            <label id="classType-label" for="classType">Type:</label>
                            <InputRadioGroup Value="ScheduleEventViewModel.Type" ValueExpression="() => ScheduleEventViewModel.Type" ValueChanged="(ScheduleEvent.ClassType v) => ScheduleEventViewModel.Type = v" class="form-control" id="classType">
                                @foreach (var type in Enum.GetValues<ScheduleEvent.ClassType>())
                                {
                                    string id = $"{Id.ToString()}-{@type.ToString().ToLower()}";
                                    <div class="classTypeElement">
                                        <InputRadio Value="type" id="@id" />
                                        <label for="@id">@type</label>
                                    </div>
                                }
                            </InputRadioGroup>
                        </div>

                        <div class="form-group">
                            <label for="lecturer">Lecturer:</label>
                            <InputText id="lecturer" Value="@ScheduleEventViewModel.Lecturer" ValueExpression="() => ScheduleEventViewModel.Lecturer"  ValueChanged="(v) => ScheduleEventViewModel.Lecturer = v" class="form-control" placeholder="Enter lecturer name" />
                            <ValidationMessage For="() => ScheduleEventViewModel.Lecturer" />
                        </div>

                        <div class="form-group">
                            <label for="additionalInformation">Additional Information:</label>
                            <InputTextArea id="additionalInformation" Value="@ScheduleEventViewModel.AdditionalInformation" ValueExpression="() => ScheduleEventViewModel.AdditionalInformation" ValueChanged="(v) => ScheduleEventViewModel.AdditionalInformation = v" class="form-control" placeholder="Enter additional information" />
                            <ValidationMessage For="() => ScheduleEventViewModel.AdditionalInformation" />
                        </div>

                        <div class="form-group">
                            <label class="btn btn-outline-primary" for="addtionalEvents" title="Option comming soon!"> <span class="clr-secondary">⤹</span> More Events at This Time? <span class="clr-secondary">⤸</span></label>
                            <InputCheckbox disabled id="addtionalEvents" class="btn-check form-control" Value="@ScheduleEventViewModel.AddtionalEvents" ValueExpression="() => ScheduleEventViewModel.AddtionalEvents" ValueChanged="(v) => ScheduleEventViewModel.AddtionalEvents   = v" />
                        </div>

                        <div class="submit-group">
                            <button type="submit" class="btn btn-primary">Save</button>
                            <button type="button" @onclick="@((args) => {CloseModal(); SetModelNull(); })" class="btn btn-secondary">Close</button>
                        </div>
                    </EditForm> *@
                    </span>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string? Id { get; set; }

    [Parameter]
    public string DarkModeCssClass { get; set; } = string.Empty;

    [SupplyParameterFromForm]
    //public ScheduleEventViewModel? ScheduleEventViewModel { get; set; }
    public ScheduleEventViewModel? ScheduleEventViewModel { get; set; }

    private ScheduleEvent? scheduleEvent = null;

    string title = string.Empty;

    //private EditContext? editContext;

    public static string GetModalId(string id) => $"modal-{id}";


    protected override void OnParametersSet()
    {
        if (Id is not null)
        {
            scheduleEvent = EventsClient.GetEvent(Id);

            if (scheduleEvent is null)  // -> If we're adding new event
            {
                title = "Add Event";
                ScheduleEventViewModel = new()
                    {
                        Id = this.Id,
                        Room = string.Empty,
                        Name = string.Empty,
                        Lecturer = string.Empty
                    };
            }
            else
            {                          // -> When event already exists under specified id
                title = $"Edit {scheduleEvent.Name}";
                ScheduleEventViewModel = new()
                {
                        Id = scheduleEvent.Id,
                        Room = scheduleEvent.Room,
                        Name = scheduleEvent.Name,
                        Lecturer = scheduleEvent.Lecturer
                };
            }
        
            //editContext = new EditContext(ScheduleEventViewModel);

        }

    }

    // protected override void OnInitialized()
    // {
    //     if (ScheduleEventViewModel is not null)
    //         editContext = new EditContext(ScheduleEventViewModel);
    // }

    private void HandleSubmit()
    {
        if (scheduleEvent is null)
        {
            EventsClient.AddEvent(ScheduleEventViewModel!);
            scheduleEvent = EventsClient.GetEvent(Id);
            // how tf does scheduleEvent Updates even tho it isnt updated with scheduleEventViewModel data???
            title = $"Edit {ScheduleEventViewModel!.Name}";
        }
        else
        {
            EventsClient.UpdateEvent(ScheduleEventViewModel!);
            // how tf does scheduleEvent Updates even tho it isnt updated with scheduleEventViewModel data???
        }

        CloseModal();
    }

    private void CloseModal()
    {
        JSRuntime.InvokeVoidAsync("closeModal", GetModalId(Id!));
    }

    // is it really a bug or a feature?
    private void SetModelNull()
    {
        // find better "edit mode detection"
        if (Id is not null )//&& ScheduleEventViewModel != EventsClient.GetEvent(Id))
        {
            ScheduleEventViewModel = new()
                {
                    Id = this.Id,
                    Room = string.Empty,
                    Name = string.Empty,
                    Lecturer = string.Empty
                };
        }
    }

    // ADD HELP METHOD TO CHECK IF USER ADDS OR EDITS AN EVENT
}
